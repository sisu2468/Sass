{"version":3,"file":"static/js/945.7fbe6ada.chunk.js","mappings":"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","sources":["components/Cards/TitleCard.js","components/Typography/Subtitle.js","features/dashboard/components/DashboardStats.js","features/dashboard/components/UserChannels.js","features/dashboard/components/LineChart.js","features/dashboard/components/BarChart.js","features/dashboard/components/DashboardTopBar.js","features/dashboard/components/DoughnutChart.js","features/dashboard/index.js","pages/protected/Dashboard.js"],"sourcesContent":["import { useState } from 'react';\nimport { Button, Alert } from 'antd';\nimport { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\nimport axios from 'axios';\nimport Subtitle from \"../Typography/Subtitle\";\n\nfunction TitleCard({ title, children, topMargin, EyeIcon, TopSideButtons, isVisible, onEyeChange }) {\n  const generateUniqueString = () => {\n    return Math.random().toString(36).substr(2, 40);\n  };\n\n  const NewPageCreate = async () => {\n    const uniqueString = generateUniqueString();\n    console.log(\"Creating new component with unique string:\", uniqueString);\n    try {\n      const response = await axios.post('/create-component', { uniqueString });\n      if (response.data.success) {\n        return <Alert message=\"Component created successfully!\" type=\"success\" showIcon />;\n      } else {\n        return <Alert message=\"Failed to create component\" type=\"error\" showIcon />;\n      }\n    } catch (error) {\n      console.error('Error creating component', error);\n    }\n  };\n  return (\n    <div className={\"card w-full p-3 md:p-6 bg-base-100 shadow-xl \" + (topMargin || \"mt-4\")}>\n      <Subtitle styleClass={TopSideButtons ? \"inline-block\" : \"\"}>\n        {title}\n        {TopSideButtons && <Button type='primary' className=\"inline-block float-right\" onClick={NewPageCreate}>{TopSideButtons}</Button>}\n        {EyeIcon && <button className=\"float-right pr-5\" onClick={onEyeChange}>\n          {isVisible ? <EyeOutlined /> : <EyeInvisibleOutlined />}\n        </button>}\n      </Subtitle>\n\n      <div className=\"divider mt-2\"></div>\n\n      {(isVisible || EyeIcon) && \n        <div className='h-full w-full pb-4 bg-base-100'>\n          {children}\n        </div>\n      }\n\n    </div>\n  );\n}\n\nexport default TitleCard;\n"," function Subtitle({styleClass, children}){\n    return(\n        <div className={`text-xl font-semibold ${styleClass}`}>{children}</div>\n    )\n}\n\nexport default Subtitle","function DashboardStats({title, icon, value, description, colorIndex}){\n\n    const COLORS = [\"primary\", \"primary\"]\n\n    const getDescStyle = () => {\n        if(description.includes(\"↗︎\"))return \"font-bold text-green-700 dark:text-green-300\"\n        else if(description.includes(\"↙\"))return \"font-bold text-rose-500 dark:text-red-400\"\n        else return \"\"\n    }\n\n    return(\n        <div className=\"stats shadow\">\n            <div className=\"stat\">\n                <div className={`stat-figure dark:text-slate-300 text-${COLORS[colorIndex%2]}`}>{icon}</div>\n                <div className=\"stat-title dark:text-slate-300\">{title}</div>\n                <div className={`stat-value dark:text-slate-300 text-${COLORS[colorIndex%2]}`}>{value}</div>\n                <div className={\"stat-desc  \" + getDescStyle()}>{description}</div>\n            </div>\n        </div>\n    )\n}\n\nexport default DashboardStats","import TitleCard from \"../../../components/Cards/TitleCard\"\n\nconst userSourceData = [\n    // {source : \"Facebook Ads\", count : \"26,345\", conversionPercent : 10.2},\n    // {source : \"Google Ads\", count : \"21,341\", conversionPercent : 11.7},\n    // {source : \"Instagram Ads\", count : \"34,379\", conversionPercent : 12.4},\n    // {source : \"Affiliates\", count : \"12,359\", conversionPercent : 20.9},\n    // {source : \"Organic\", count : \"10,345\", conversionPercent : 10.3},\n]\n\nfunction UserChannels(){\n    return(\n        <TitleCard title={\"Credit History\"}>\n             {/** Table Data */}\n             <div className=\"overflow-x-auto\">\n                <table className=\"table w-full\">\n                    <thead>\n                    <tr>\n                        <th></th>\n                        <th className=\"normal-case\">Date</th>\n                        <th className=\"normal-case\">Title</th>\n                        <th className=\"normal-case\">Deduction Credit</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            userSourceData.map((u, k) => {\n                                return(\n                                    <tr key={k}>\n                                        <th>{k+1}</th>\n                                        <td>{u.source}</td>\n                                        <td>{u.count}</td>\n                                        <td>{`${u.conversionPercent}%`}</td>\n                                    </tr>\n                                )\n                            })\n                        }\n                    </tbody>\n                </table>\n            </div>\n        </TitleCard>\n    )\n}\n\nexport default UserChannels","import {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Filler,\n  Legend,\n} from 'chart.js';\nimport { Line, Bar } from 'react-chartjs-2';\nimport TitleCard from '../../../components/Cards/TitleCard';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Filler,\n  Legend\n);\n\nfunction LineChart(){\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n    },\n  };\n\n  \n  const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n\n  const data = {\n  labels,\n  datasets: [\n    {\n      fill: true,\n      label: 'Credit',\n      data: labels.map(() => { return Math.random() * 100 + 500 }),\n      borderColor: 'rgb(53, 162, 235)',\n      backgroundColor: 'rgba(53, 162, 235, 0.5)',\n    },\n  ],\n};\n  \n\n    return(\n      <></>\n      // <TitleCard title={\"User Credit History\"}>\n      //     <Bar data={data} options={options}/>\n      // </TitleCard>\n    )\n}\n\n\nexport default LineChart","import {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport TitleCard from '../../../components/Cards/TitleCard';\n\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\nfunction BarChart(){\n\n    const options = {\n        responsive: true,\n        plugins: {\n          legend: {\n            position: 'top',\n          }\n        },\n      };\n      \n      const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n      \n      const data = {\n        labels,\n        datasets: [\n          {\n            label: 'Store 1',\n            data: labels.map(() => { return Math.random() * 1000 + 500 }),\n            backgroundColor: 'rgba(255, 99, 132, 1)',\n          },\n          {\n            label: 'Store 2',\n            data: labels.map(() => { return Math.random() * 1000 + 500 }),\n            backgroundColor: 'rgba(53, 162, 235, 1)',\n          },\n        ],\n      };\n\n    return(\n      <TitleCard title={\"Revenue\"}>\n            <Bar options={options} data={data} />\n      </TitleCard>\n\n    )\n}\n\n\nexport default BarChart","import ShareIcon from '@heroicons/react/24/outline/ShareIcon';\nimport { useState } from \"react\";\nimport Datepicker from \"react-tailwindcss-datepicker\";\n\n\nfunction DashboardTopBar({ updateDashboardPeriod }) {\n\n    const [dateValue, setDateValue] = useState({\n        startDate: new Date(),\n        endDate: new Date()\n    });\n\n    const handleDatePickerValueChange = (newValue) => {\n        console.log(\"newValue:\", newValue);\n        setDateValue(newValue);\n        updateDashboardPeriod(newValue);\n    };\n\n    return (\n        <>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <div>\n                    <Datepicker\n                        containerClassName=\"w-72\"\n                        value={dateValue}\n                        theme=\"light\"\n                        inputClassName=\"input input-bordered w-72\"\n                        popoverDirection=\"down\"\n                        toggleClassName=\"invisible\"\n                        onChange={handleDatePickerValueChange}\n                        showShortcuts={true}\n                        primaryColor=\"white\"\n                    />\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default DashboardTopBar;\n","import {\n  Chart as ChartJS,\n  Filler,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport TitleCard from '../../../components/Cards/TitleCard';\nimport Subtitle from '../../../components/Typography/Subtitle';\n\nChartJS.register(ArcElement, Tooltip, Legend,\n    Tooltip,\n    Filler,\n    Legend);\n\nfunction DoughnutChart(){\n\n    const options = {\n        responsive: true,\n        plugins: {\n          legend: {\n            position: 'top',\n          },\n        },\n      };\n      \n      const labels = ['Electronics', 'Home Applicances', 'Beauty', 'Furniture', 'Watches', 'Apparel'];\n      \n      const data = {\n        labels,\n        datasets: [\n            {\n                label: '# of Orders',\n                data: [122, 219, 30, 51, 82, 13],\n                backgroundColor: [\n                  'rgba(255, 99, 132, 0.8)',\n                  'rgba(54, 162, 235, 0.8)',\n                  'rgba(255, 206, 86, 0.8)',\n                  'rgba(75, 192, 192, 0.8)',\n                  'rgba(153, 102, 255, 0.8)',\n                  'rgba(255, 159, 64, 0.8)',\n                ],\n                borderColor: [\n                  'rgba(255, 99, 132, 1)',\n                  'rgba(54, 162, 235, 1)',\n                  'rgba(255, 206, 86, 1)',\n                  'rgba(75, 192, 192, 1)',\n                  'rgba(153, 102, 255, 1)',\n                  'rgba(255, 159, 64, 1)',\n                ],\n                borderWidth: 1,\n              }\n        ],\n      };\n\n    return(\n        <TitleCard title={\"Orders by Category\"}>\n                <Doughnut options={options} data={data} />\n        </TitleCard>\n    )\n}\n\n\nexport default DoughnutChart","import DashboardStats from './components/DashboardStats'\nimport AmountStats from './components/AmountStats'\nimport PageStats from './components/PageStats'\n\nimport UserGroupIcon  from '@heroicons/react/24/outline/UserGroupIcon'\nimport UsersIcon  from '@heroicons/react/24/outline/UsersIcon'\nimport CircleStackIcon  from '@heroicons/react/24/outline/CircleStackIcon'\nimport CreditCardIcon  from '@heroicons/react/24/outline/CreditCardIcon'\nimport UserChannels from './components/UserChannels'\nimport LineChart from './components/LineChart'\nimport BarChart from './components/BarChart'\nimport DashboardTopBar from './components/DashboardTopBar'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {showNotification} from '../common/headerSlice'\nimport DoughnutChart from './components/DoughnutChart'\nimport { useState } from 'react'\n\nfunction Dashboard(){\n\n    const dispatch = useDispatch()\n    const { user } = useSelector(state => state.user);\n    console.log(user);\n    \n    const statsData = user ? [\n        {\n            title: \"Total Sales\",\n            value: '$'+user.paid,\n            icon: <CreditCardIcon className='w-8 h-8'/>,\n            description: \"Current month\"\n        },\n        {\n            title: \"Current Credit\",\n            value: user.credit,\n            icon: <CircleStackIcon className='w-8 h-8'/>,\n            description: \"\"\n        }\n    ] : [];\n    \n    const updateDashboardPeriod = (newRange) => {\n        // Dashboard range changed, write code to refresh your values\n        dispatch(showNotification({message : `Period updated to ${newRange.startDate} to ${newRange.endDate}`, status : 1}))\n    }\n\n    return(\n        <>\n        {/** ---------------------- Select Period Content ------------------------- */}\n            <DashboardTopBar updateDashboardPeriod={updateDashboardPeriod}/>\n        \n        {/** ---------------------- Different stats content 1 ------------------------- */}\n            <div className=\"grid lg:grid-cols-2 mt-2 md:grid-cols-2 grid-cols-1 gap-6\">\n                {\n                    statsData.map((d, k) => {\n                        return (\n                            <DashboardStats key={k} {...d} colorIndex={k}/>\n                        )\n                    })\n                }\n            </div>\n\n\n\n        {/** ---------------------- Different charts ------------------------- */}\n            <div className=\"grid mt-4 grid-cols-1 gap-6\">\n                <LineChart />\n            </div>\n            \n        \n        {/** ---------------------- User source channels table  ------------------------- */}\n        \n            <div className=\"grid mt-4 grid-cols-1 gap-6\">\n                <UserChannels />\n            </div>\n        </>\n    )\n}\n\nexport default Dashboard","import { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { setPageTitle } from '../../features/common/headerSlice'\nimport Dashboard from '../../features/dashboard/index'\n\nfunction InternalPage(){\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(setPageTitle({ title : \"Dashboard\"}))\n      }, [])\n\n\n    return(\n        <Dashboard />\n    )\n}\n\nexport default InternalPage"],"names":["_ref","title","children","topMargin","EyeIcon","TopSideButtons","isVisible","onEyeChange","_jsxs","className","Subtitle","styleClass","_jsx","Button","type","onClick","async","uniqueString","Math","random","toString","substr","console","log","axios","post","data","success","Alert","message","showIcon","error","EyeOutlined","EyeInvisibleOutlined","concat","icon","value","description","colorIndex","COLORS","includes","userSourceData","TitleCard","map","u","k","source","count","conversionPercent","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Filler","Legend","labels","_Fragment","BarElement","updateDashboardPeriod","dateValue","setDateValue","useState","startDate","Date","endDate","Datepicker","containerClassName","theme","inputClassName","popoverDirection","toggleClassName","onChange","newValue","showShortcuts","primaryColor","ArcElement","dispatch","useDispatch","user","useSelector","state","statsData","paid","CreditCardIcon","credit","CircleStackIcon","DashboardTopBar","newRange","showNotification","status","d","DashboardStats","LineChart","UserChannels","useEffect","setPageTitle","Dashboard"],"sourceRoot":""}