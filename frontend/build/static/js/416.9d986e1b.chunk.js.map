{"version":3,"file":"static/js/416.9d986e1b.chunk.js","mappings":"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","sources":["components/Cards/Cards.js","components/Typography/Subtitle.js","features/Payment/Stripe/CheckOutForm.jsx","features/Payment/PayPal/PayPalButton.jsx","pages/protected/payment/Stripe.js"],"sourcesContent":["import Subtitle from \"../Typography/Subtitle\"\r\n\r\n  \r\n  function TitleCard({title, children, topMargin, TopSideButtons}){\r\n      return(\r\n          <div className={\"card w-full p-3 md:p-6 bg-base-100 shadow-xl \" + (topMargin || \"mt-4\")}>\r\n\r\n            {/* Title for Card */}\r\n              <Subtitle styleClass={TopSideButtons ? \"inline-block\" : \"\"}>\r\n                {title}\r\n\r\n                {/* Top side button, show only if present */}\r\n                {\r\n                    TopSideButtons && <div className=\"inline-block float-right\">{TopSideButtons}</div>\r\n                }\r\n              </Subtitle>\r\n              \r\n              <div className=\"divider mt-2\"></div>\r\n          \r\n              {/** Card Body */}\r\n              <div className='h-full w-full pb-4 bg-base-100'>\r\n                  {children}\r\n              </div>\r\n          </div>\r\n          \r\n      )\r\n  }\r\n  \r\n  \r\n  export default TitleCard"," function Subtitle({styleClass, children}){\n    return(\n        <div className={`text-xl font-semibold ${styleClass}`}>{children}</div>\n    )\n}\n\nexport default Subtitle","import { PaymentElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { useDispatch } from 'react-redux';\nimport { NotificationManager } from 'react-notifications';\nimport { useTranslation } from 'react-i18next';\nimport i18next from 'i18next';\n\nimport query from '../../../utils/query';\nimport { login } from '../../common/userSlice'\n\nconst CheckoutForm = () => {\n  const dispatch = useDispatch();\n\n  const { t } = useTranslation();\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n\n    NotificationManager.warning(i18next.t('payment_is_processing'), i18next.t('warning'));\n\n    if (!stripe || !elements) {\n      // Stripe.js hasn't yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const { error, paymentIntent } = await stripe.confirmPayment({\n      //`Elements` instance that was used to create the Payment Element\n      elements,\n      redirect: \"if_required\"\n    });\n\n    if (error) {\n      // Show error to your customer (for example, payment details incomplete)\n      NotificationManager.error(error.message, i18next.t('error'));\n    } else {\n      console.log(paymentIntent.status);\n      if (paymentIntent.status == \"succeeded\") {\n        query.put(`/profile`, { paid: true }, () => {\n          query.get('/login', (data) => {\n            dispatch(login(data.user))\n            NotificationManager.success(i18next.t('payment_success'), i18next.t('success'));\n          })\n        })\n      }\n    }\n  }\n  return (\n    <form onSubmit={onSubmit}>\n      <p className='text-xl my-2 text-center'>${Number(process.env.REACT_APP_PAY_AMOUNT) / 100}</p>\n      <PaymentElement />\n      <div className='flex justify-center mt-8'>\n        <button className='btn btn-primary' disabled={!stripe}>{t('payment')}</button>\n      </div>\n    </form>\n  );\n};\n\nexport default CheckoutForm;","// src/features/Payment/PayPal/PayPalButton.js\r\nimport React, { useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst PayPalButton = () => {\r\n  const paypalRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const loadPayPalScript = (clientId) => {\r\n      return new Promise((resolve, reject) => {\r\n        if (window.paypal) {\r\n          resolve(window.paypal);\r\n          return;\r\n        }\r\n\r\n        const script = document.createElement('script');\r\n        script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`;\r\n        script.onload = () => resolve(window.paypal);\r\n        script.onerror = reject;\r\n        document.body.appendChild(script);\r\n      });\r\n    };\r\n\r\n    const fetchPayPalClientId = async () => {\r\n      try {\r\n        const response = await axios.get('/payment/paypal/client-id');\r\n        const clientId = response.data.clientId;\r\n        loadPayPalScript(clientId).then((paypal) => {\r\n          paypal.Buttons({\r\n            createOrder: async (data, actions) => {\r\n              const res = await axios.post('/payment/paypal/create-order');\r\n              return res.data.id;\r\n            },\r\n            onApprove: async (data, actions) => {\r\n              const res = await axios.post('/payment/paypal/capture-order', {\r\n                orderID: data.orderID,\r\n              });\r\n              alert('Transaction completed by ' + res.data.payer.name.given_name);\r\n            },\r\n            onError: (err) => {\r\n              console.error('PayPal Checkout onError', err);\r\n            },\r\n          }).render(paypalRef.current);\r\n        }).catch((error) => {\r\n          console.error('Failed to load PayPal script', error);\r\n        });\r\n      } catch (error) {\r\n        console.error('Failed to fetch PayPal client ID', error);\r\n      }\r\n    };\r\n\r\n    fetchPayPalClientId();\r\n  }, []);\r\n\r\n  return <div ref={paypalRef}></div>;\r\n};\r\n\r\nexport default PayPalButton;\r\n","import query from '../../../utils/query'\nimport { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setPageTitle } from '../../../features/common/headerSlice'\nimport { Button, Dropdown, message, Space, Tooltip} from 'antd'\nimport Cards from \"../../../components/Cards/Cards\"\n\nimport { Elements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\n\nimport CheckoutForm from '../../../features/Payment/Stripe/CheckOutForm'\nimport PayPalButton from '../../../features/Payment/PayPal/PayPalButton';\n\nconst stripePromise = loadStripe(\"pk_test_51NnacALwUcVk9eB5S9la7yylhGWheK8OBqq0JXH0asDanZMCFabjwjjMCChLlcJ9rcFUc51D80IK8X98pVGhenMf00ujmYorAy\");\nconst StripePaymentPage = () => {\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(setPageTitle({ title: \"payment\" }))\n    }, []);\n\n    const { user } = useSelector(state => state.user);\n    const [client_secret, setClientSecret] = useState(null)\n\n    useEffect(() => {\n        query.post(\n            '/payment/stripe',\n            { amount: process.env.REACT_APP_PAY_AMOUNT },\n            (res) => {\n                setClientSecret(res.client_secret)\n            }\n        );\n    }, [])\n\n    const lang = localStorage.getItem('lang');\n    const theme = localStorage.getItem('theme');\n\n    const[paymenttype, setPaymentType] = useState('Stripe')\n    const handleMenuClick = (e) => {\n        message.info(`Selected ${e.key}`);\n        setPaymentType(e.key);\n    };\n    const items = [\n        {\n          label: 'Stripe',\n          key: 'Stripe',\n        },\n        {\n          label: 'PayPal',\n          key: 'PayPal',\n        },\n      ];\n      const menuProps = {\n        items,\n        onClick: handleMenuClick,\n      };\n    return (\n        <div className='flex justify-center'>\n            <div className='w-[640px]'>\n                <Dropdown.Button className='w-full' menu={menuProps}>\n                    {paymenttype}\n                </Dropdown.Button>\n                {paymenttype === 'Stripe' ? (\n                    <Cards title='Stripe'>\n                        {\n                            client_secret && (\n                                <Elements stripe={stripePromise} options={\n                                    {\n                                        clientSecret: client_secret,\n                                        locale: 'en',\n                                        appearance: {\n                                            theme: theme == 'dark' ? 'night' : 'stripe'\n                                        }\n                                    }\n                                }>\n                                    <CheckoutForm />\n                                </Elements>\n                            )\n                        }\n                    </Cards>\n                ) :(\n                    <Cards title='Paypal'>\n                        <PayPalButton />\n                    </Cards>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default StripePaymentPage"],"names":["_ref","title","children","topMargin","TopSideButtons","_jsxs","className","Subtitle","styleClass","_jsx","concat","CheckoutForm","dispatch","useDispatch","t","useTranslation","stripe","useStripe","elements","useElements","onSubmit","async","e","preventDefault","NotificationManager","warning","i18next","error","paymentIntent","confirmPayment","redirect","message","console","log","status","query","put","paid","get","data","login","user","success","Number","process","PaymentElement","disabled","PayPalButton","paypalRef","useRef","useEffect","response","axios","clientId","Promise","resolve","reject","window","paypal","script","document","createElement","src","onload","onerror","body","appendChild","loadPayPalScript","then","Buttons","createOrder","actions","post","id","onApprove","res","orderID","alert","payer","name","given_name","onError","err","render","current","catch","fetchPayPalClientId","ref","stripePromise","loadStripe","StripePaymentPage","setPageTitle","useSelector","state","client_secret","setClientSecret","useState","amount","localStorage","getItem","theme","paymenttype","setPaymentType","menuProps","items","label","key","onClick","info","Dropdown","Button","menu","Cards","Elements","options","clientSecret","locale","appearance"],"sourceRoot":""}