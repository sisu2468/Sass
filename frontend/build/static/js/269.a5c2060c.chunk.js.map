{"version":3,"file":"static/js/269.a5c2060c.chunk.js","mappings":"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","sources":["components/Cards/TitleCard.js","components/Typography/Subtitle.js","pages/protected/App.js"],"sourcesContent":["import { useState } from 'react';\nimport { Button, Alert } from 'antd';\nimport { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\nimport axios from 'axios';\nimport Subtitle from \"../Typography/Subtitle\";\n\nfunction TitleCard({ title, children, topMargin, EyeIcon, TopSideButtons, isVisible, onEyeChange }) {\n  const generateUniqueString = () => {\n    return Math.random().toString(36).substr(2, 40);\n  };\n\n  const NewPageCreate = async () => {\n    const uniqueString = generateUniqueString();\n    console.log(\"Creating new component with unique string:\", uniqueString);\n    try {\n      const response = await axios.post('/create-component', { uniqueString });\n      if (response.data.success) {\n        return <Alert message=\"Component created successfully!\" type=\"success\" showIcon />;\n      } else {\n        return <Alert message=\"Failed to create component\" type=\"error\" showIcon />;\n      }\n    } catch (error) {\n      console.error('Error creating component', error);\n    }\n  };\n  return (\n    <div className={\"card w-full p-3 md:p-6 bg-base-100 shadow-xl \" + (topMargin || \"mt-4\")}>\n      <Subtitle styleClass={TopSideButtons ? \"inline-block\" : \"\"}>\n        {title}\n        {TopSideButtons && <Button type='primary' className=\"inline-block float-right\" onClick={NewPageCreate}>{TopSideButtons}</Button>}\n        {EyeIcon && <button className=\"float-right pr-5\" onClick={onEyeChange}>\n          {isVisible ? <EyeOutlined /> : <EyeInvisibleOutlined />}\n        </button>}\n      </Subtitle>\n\n      <div className=\"divider mt-2\"></div>\n\n      {(isVisible || EyeIcon) && \n        <div className='h-full w-full pb-4 bg-base-100'>\n          {children}\n        </div>\n      }\n\n    </div>\n  );\n}\n\nexport default TitleCard;\n"," function Subtitle({styleClass, children}){\n    return(\n        <div className={`text-xl font-semibold ${styleClass}`}>{children}</div>\n    )\n}\n\nexport default Subtitle","import { useEffect, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useTranslation } from 'react-i18next'\nimport { setPageTitle } from '../../features/common/headerSlice'\nimport { Table, Input, ColorPicker, Dropdown, Radio, Select, Typography, Button, Image, Upload} from 'antd'\nimport { EyeOutlined, RocketOutlined, DownOutlined, UploadOutlined } from '@ant-design/icons';\nimport TitleCard from '../../components/Cards/TitleCard'\n\n\nconst { Column } = Table;\n\nfunction Result() {\n    const { TextArea } = Input;\n    const { Option } = Select;\n    const { Title } = Typography;\n    const [eyestate, setEyeState] = useState(true);\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(setPageTitle({ title: \"result\" }))\n    }, [])\n\n    const[bkcolor, setBkColor] = useState('#2a323c')\n    const[textcolor, setTextColor] = useState('#3F6AA6')\n    const[buttoncolor, setButtonColor] = useState('#024DB6')\n\n    const[title, setTitle] = useState('My APP')\n    const[description, setDescription] = useState('My APP')\n\n    const[formlabel, setFormLabel] = useState('My Form')\n    const[formfield, setFormField] = useState('')\n\n    const [position, setPosition] = useState('end');\n\n    function hsvToHex(h, s, v) {\n        let r, g, b;\n      \n        const i = Math.floor(h * 6);\n        const f = h * 6 - i;\n        const p = v * (1 - s);\n        const q = v * (1 - f * s);\n        const t = v * (1 - (1 - f) * s);\n      \n        switch (i % 6) {\n          case 0: r = v; g = t; b = p; break;\n          case 1: r = q; g = v; b = p; break;\n          case 2: r = p; g = v; b = t; break;\n          case 3: r = p; g = q; b = v; break;\n          case 4: r = t; g = p; b = v; break;\n          case 5: r = v; g = p; b = q; break;\n          default: r = 0; g = 0; b = 0;\n        }\n      \n        const toHex = x => {\n          const hex = Math.round(x * 255).toString(16);\n          return hex.length === 1 ? '0' + hex : hex;\n        };\n      \n        return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n    }\n\n    // Handle color change event\n    const bkColorChange = (color) => {\n        const { h, s, v } = color.metaColor.originalInput; // Extract HSV values\n        const hexColor = hsvToHex(h, s, v); // Convert HSV to hex\n        setBkColor(hexColor); // Update the state with the hex value\n        console.log(hexColor); // Log the hex value for debugging purposes\n    };\n    const textColorChange = (color) => {\n        const { h, s, v } = color.metaColor.originalInput; // Extract HSV values\n        const hexColor = hsvToHex(h, s, v); // Convert HSV to hex\n        setTextColor(hexColor); // Update the bkcolor state with the selected color's hex value\n    };\n    const buttonColorChange = (color) => {\n        const { h, s, v } = color.metaColor.originalInput; // Extract HSV values\n        const hexColor = hsvToHex(h, s, v); // Convert HSV to hex\n        setButtonColor(hexColor); // Update the bkcolor state with the selected color's hex value\n    };\n    const titleChange = (e) => {\n        setTitle(e.target.value); // Update the bkcolor state with the selected color's hex value\n    };\n    const descriptionChange = (e) => {\n        setDescription(e.target.value); // Update the bkcolor state with the selected color's hex value\n    };\n    const formlabelChange = (e) => {\n        setFormLabel(e.target.value); // Update the bkcolor state with the selected color's hex value\n    };\n    const formfieldChange = (e) => {\n        setFormField(e.target.value); // Update the bkcolor state with the selected color's hex value\n    };\n    const[myform, setMyform] = useState('')\n    const SetForm = (e) => {\n        setMyform(e.target.value)\n    }\n    const setClear = (e) => {\n        setMyform('')\n    }\n    const EyeChange = () => {\n        setEyeState(prevEyeState => !prevEyeState);\n    };\n    console.log(eyestate)\n    const[openaikey, setOpenAIKey] = useState('')\n    const OpenAIKey = (e) => {\n        setOpenAIKey(e.target.value)\n    }\n    // Assuming you have a function called 'handleSubmit' that is called when the submit button is clicked\n    function handleSubmit() {\n        // Get the current URL\n        const currentUrl = window.location.href;\n    \n        // Extract the domain from the current URL\n        const domain = new URL(currentUrl).hostname.split('.').slice(-2).join('.');\n    \n        // Generate a new subdomain\n        const subdomain = `subdomain-${Date.now()}.${domain}`;\n    \n        // Construct the new URL with the subdomain\n        const newUrl = `http://${subdomain}${window.location.pathname}${window.location.search}`;\n    \n        // Redirect the user to the new URL\n        window.location.href = newUrl;\n    }\n    const [loadings, setLoadings] = useState([]);\n    const enterLoading = (index) => {\n        setLoadings((state) => {\n          const newLoadings = [...state];\n          newLoadings[index] = true;\n          return newLoadings;\n        });\n        setTimeout(() => {\n          setLoadings((state) => {\n            const newLoadings = [...state];\n            newLoadings[index] = false;\n            return newLoadings;\n          });\n        }, 6000);\n      };\n      const items = [\n        {\n            label: 'Submit and continue',\n            key: '1',\n        },\n        {\n            label: 'Submit and continue',\n            key: '2',\n        }\n      ];\n    const [previewOpen, setPreviewOpen] = useState(false);\n    const [previewImage, setPreviewImage] = useState('');\n    const [fileList, setFileList] = useState([]);\n    const handlePreview = async (file) => {\n    if (!file.url && !file.preview) {\n        file.preview = await getBase64(file.originFileObj);\n    }\n    setPreviewImage(file.url || file.preview);\n    setPreviewOpen(true);\n    };\n    const handleChange = ({ fileList: newFileList }) => setFileList(newFileList);\n    const uploadButton = (\n    <button\n        style={{\n        border: 0,\n        background: 'none',\n        }}\n        type=\"button\"\n    >\n        <UploadOutlined />\n        <div\n        style={{\n            marginTop: 8,\n        }}\n        >\n        Upload\n        </div>\n    </button>\n    );\n    const getBase64 = (file) =>\n    new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = (error) => reject(error);\n    });\n    return (\n        <div className='flex gap-4 flex-wrap lg:flex-nowrap'>\n            {/* <TitleCard className=\"flex-grow\" title={\"Edit\"}>\n                <Space direction=\"vertical\" className='w-full'>\n                    <Collapse\n                        collapsible=\"header\"\n                        defaultActiveKey={['1']}\n                        icon={OpenAIOutlined}\n                        // className='w-full'\n                        expandIconPosition={'end'}\n                        items={[\n                            {\n                                key: '1',\n                                icon: {OpenAIOutlined},\n                                label: 'App Basics',\n                                children: \n                                <>\n                                    <div className='flex'>\n                                        <label className='w-24 p-1'>Background:  </label>\n                                        <ColorPicker className='border-none\tbg-inherit' defaultValue={bkcolor} onChange={bkColorChange} value={bkcolor}/>\n                                    </div>\n                                    <div className='flex'>\n                                        <label className='w-24 p-1'>Text:  </label>\n                                        <ColorPicker className='border-none\tbg-inherit' defaultValue={textcolor} onChange={textColorChange} value={textcolor} />\n                                    </div>\n                                    <div className='flex'>\n                                        <label className='w-24 p-1'>Button:  </label>\n                                        <ColorPicker className='border-none\tbg-inherit' defaultValue={buttoncolor} onChange={buttonColorChange} value={buttoncolor} />\n                                    </div>\n                                    <div className='flex mb-1.5'>\n                                        <label className='w-24 p-1'>App Title:  </label>\n                                        <Input rows={4} placeholder=\"maxLength is 10\" maxLength={10} onChange={titleChange} value={title} />\n                                    </div>\n                                    <div className='flex'>\n                                        <label className='w-24 p-1'>Description:  </label>\n                                        <TextArea rows={4} placeholder=\"maxLength is 20\" maxLength={20} onChange={descriptionChange} value={description} />\n                                    </div>\n                                </>,\n                            },\n                        ]}\n                    />\n                    <Collapse\n                        collapsible=\"header\"\n                        icon={OpenAIOutlined}\n                        // className='w-full'\n                        expandIconPosition={'end'}\n                        items={[\n                            {\n                                key: '2',\n                                icon: {OpenAIOutlined},\n                                label: 'Form',\n                                children: \n                                <>\n                                    <div className='flex mb-1.5'>\n                                        <label className='w-24 p-1'>Field Label:  </label>\n                                        <Input rows={4} placeholder=\"\" maxLength={10} onChange={formlabelChange} value={formlabel}/>\n                                    </div>\n                                    <div className='flex'>\n                                        <label className='w-24 p-1'>Description:  </label>\n                                        <Input rows={4} placeholder=\"Placeholder Text\" maxLength={100} onChange={formfieldChange} value={formfield} />\n                                    </div>\n                                </>,\n                            },\n                        ]}\n                    />\n                    <Collapse\n                        collapsible=\"header\"\n                        icon={OpenAIOutlined}\n                        // className='w-full'\n                        expandIconPosition={'end'}\n                        items={[\n                            {\n                                key: '3',\n                                icon: {OpenAIOutlined},\n                                label: 'OpenAI',\n                                children: \n                                <>\n                                    <div className='flex'>\n                                        <label className='w-24 p-1'>OpenAI Key:  </label>\n                                        <Input rows={4} placeholder=\"Please Input OpenAI Key\" maxLength={1000} onChange={OpenAIKey} value={openaikey} />\n                                    </div>\n                                </>,\n                            },\n                        ]}\n                    />\n                </Space>\n            </TitleCard> */}\n            <TitleCard\n                className=\"flex-grow\"\n                title={\"Title of the form (editable)\"}\n                EyeIcon={true}\n                TopSideButtons={'Publish'}\n                isVisible={eyestate}\n                onEyeChange={EyeChange}\n            >\n                <div className='mt-8'>\n                    <p>This is just a test form with all components.</p>\n                    <div className='mt-8 flex flex-col'>\n                        <label>Label (for short answer)</label>\n                        <Input className='mt-2' showCount maxLength={120} style={{width: 400}}/>\n                    </div>\n                    <div className='mt-8'>\n                        <label>Label (for long answer / Active)</label>\n                        <TextArea\n                            showCount\n                            maxLength={1000}\n                            className='mt-2'\n                            // placeholder=\"disable resize\"\n                            style={{\n                                width: 600,\n                                height: 160\n                            }}\n                        />\n                    </div>\n                    <div className='mt-8 flex flex-col'>\n                        <label>Label (for single select)</label>\n                        <Radio.Group name=\"radiogroup\" className='mt-2' defaultValue={1}>\n                            <Radio value={1}>A</Radio>\n                            <Radio value={2}>B</Radio>\n                            <Radio value={3}>C</Radio>\n                        </Radio.Group>\n                    </div>\n                    <div className='mt-8 flex flex-col'>\n                        <label>Label (for Multi select)</label>\n                        <Radio.Group name=\"radiogroup\" className='mt-2' defaultValue={1}>\n                            <Radio value={1}>A</Radio>\n                            <Radio value={2}>B</Radio>\n                            <Radio value={3}>C</Radio>\n                        </Radio.Group>\n                    </div>\n                    <div className='mt-8 flex flex-col'>\n                        <label>Label (for Multi select)</label>\n                        <Dropdown.Button\n                            icon={<DownOutlined />}\n                            loading={loadings[1]}\n                            menu={{\n                                items,\n                            }}\n                            onClick={() => enterLoading(1)}\n                            style = {{\n                                width: 400\n                            }}\n                        >\n                            Search\n                        </Dropdown.Button>\n                    </div>\n                    <div className='mt-8 flex flex-col'>\n                        <label>Label (for Multi select)</label>\n                        <Upload\n                            action=\"https://660d2bd96ddfa2943b33731c.mockapi.io/api/upload\"\n                            listType=\"picture-circle\"\n                            fileList={fileList}\n                            className='mt-2'\n                            onPreview={handlePreview}\n                            onChange={handleChange}\n                        >\n                            {fileList.length >= 8 ? null : uploadButton}\n                        </Upload>\n                        {previewImage && (\n                            <Image\n                            wrapperStyle={{\n                                display: 'none',\n                            }}\n                            preview={{\n                                visible: previewOpen,\n                                onVisibleChange: (visible) => setPreviewOpen(visible),\n                                afterOpenChange: (visible) => !visible && setPreviewImage(''),\n                            }}\n                            src={previewImage}\n                            />\n                        )}\n                    </div>\n                    <div className='mt-8 flex flex-col'>\n                        <label>Label (for Multi select)</label>\n                        <Input rows={4} className='mt-2' placeholder=\"\" maxLength={10} style={{width: 400}}/>\n                    </div>\n                </div>\n            </TitleCard>\n\n            <TitleCard\n                className=\"flex-grow\"\n                title={\"Preview & Test Window\"}\n                isVisible={eyestate}\n            >\n                <div className='px-20 h-full py-5' style={{ backgroundColor: bkcolor, color: textcolor }}>\n                <h1 style={{ color: textcolor }} className='text-center mb-5 pt-8 text-4xl font-bold'>{title}</h1>\n                <h2 style={{ color: textcolor }} className='text-2xl mb-5'>{description}</h2>\n                <h3 style={{ color: textcolor }} className='text-xl mb-5'>{formlabel}</h3>\n                <textarea\n                    className='mb-4 w-full rounded-lg'\n                    rows={4}\n                    placeholder={formfield}\n                    maxLength={1000}\n                    onChange={e => setMyform(e.target.value)}\n                    value={myform}\n                    style = {{height: 200}}\n                />\n                <div wrap className='flex item-center justify-center'>\n                    <button\n                    className='mr-10 rounded-md w-20 font-bold text-white'\n                    style={{ backgroundColor: buttoncolor }}\n                    onClick={() => setMyform('')}\n                    >\n                    Clear<i data-lucide=\"paintbrush\"></i>\n                    </button>\n                    <button\n                    className='rounded-md h-10 w-20 font-bold text-white'\n                    style={{ backgroundColor: buttoncolor }}\n                    onClick={() => alert('Form submitted!')}\n                    >\n                    Submit\n                    </button>\n                </div>\n                </div>\n            </TitleCard>\n        </div >\n    )\n}\n\nexport default Result"],"names":["_ref","title","children","topMargin","EyeIcon","TopSideButtons","isVisible","onEyeChange","_jsxs","className","Subtitle","styleClass","_jsx","Button","type","onClick","async","uniqueString","Math","random","toString","substr","console","log","axios","post","data","success","Alert","message","showIcon","error","EyeOutlined","EyeInvisibleOutlined","concat","Column","Table","TextArea","Input","Option","Select","Title","Typography","eyestate","setEyeState","useState","dispatch","useDispatch","useEffect","setPageTitle","bkcolor","setBkColor","textcolor","setTextColor","buttoncolor","setButtonColor","setTitle","description","setDescription","formlabel","setFormLabel","formfield","setFormField","position","setPosition","myform","setMyform","openaikey","setOpenAIKey","loadings","setLoadings","previewOpen","setPreviewOpen","previewImage","setPreviewImage","fileList","setFileList","uploadButton","style","border","background","UploadOutlined","marginTop","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","TitleCard","EyeChange","prevEyeState","showCount","maxLength","width","height","Radio","name","defaultValue","value","Dropdown","icon","DownOutlined","loading","menu","items","label","key","enterLoading","index","state","newLoadings","setTimeout","Upload","action","listType","onPreview","url","preview","originFileObj","onChange","newFileList","length","Image","wrapperStyle","display","visible","onVisibleChange","afterOpenChange","src","rows","placeholder","backgroundColor","color","e","target","wrap","alert"],"sourceRoot":""}